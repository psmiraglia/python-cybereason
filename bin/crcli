#!/usr/bin/env python3

# Copyright 2022 Paolo Smiraglia <paolo.smiraglia@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import json
import logging
import os
import sys
from typing import Dict

from pycybereason import version
from pycybereason.actions import SensorsActions
from pycybereason.api import Cybereason
from pycybereason.app import PoliciesSubcommand

LOG = logging.getLogger(__name__)


def logo():
    print(f'''
                   _____      _
                  / ____|    | |
      _ __  _   _| |    _   _| |__   ___ _ __ ___  __ _ ___  ___  _ __
     | '_ \| | | | |   | | | | '_ \ / _ \ '__/ _ \/ _` / __|/ _ \| '_ \\
     | |_) | |_| | |___| |_| | |_) |  __/ | |  __/ (_| \__ \ (_) | | | |
     | .__/ \__, |\_____\__, |_.__/ \___|_|  \___|\__,_|___/\___/|_| |_|
     | |     __/ |       __/ |
     |_|    |___/       |___/  v{version}

 ''')  # noqa


def _parse_cfg_file(cfg_file: str) -> Dict:
    cfg = {}
    if not os.path.exists(cfg_file):
        LOG.error(f'{cfg_file} not found')
        sys.exit(1)
    else:
        with open(cfg_file, 'r') as fp:
            cfg = json.load(fp)
            fp.close()
    return cfg


def _filters(filters: str) -> Dict:
    f = None

    try:
        if filters.startswith('@'):
            # load filters from file
            ffile = filters[1:]
            if not os.path.exists(ffile):
                LOG.error(f'{ffile} does not exist')
            else:
                LOG.debug(f'Load filters from file ({ffile})')
                with open(ffile, 'r') as fp:
                    f = json.load(fp)
                    fp.close()
        else:
            # load filters from string
            LOG.debug(f'Load filters from string ({filters})')
            f = json.loads(filters)
    except Exception as e:
        LOG.error(f'Unable to load filters: {e}')
        sys.exit(1)

    return f


def parse_connection_options(args: argparse.Namespace) -> Dict:
    opts = {}
    keys = ['server', 'username', 'password']

    # read from options
    for k in keys:
        value = getattr(args, k)
        if value:
            LOG.debug(f'Reading {k} from switch: --{k}')
            opts[k] = value

    # read from config file
    if args.conf:
        cfg = _parse_cfg_file(args.conf)
        for k in keys:
            if k in cfg:
                LOG.debug(f'Reading {k} from file: {args.conf}')
                opts[k] = cfg[k]

    # read from envvar
    for k in keys:
        envvar = f'CRCLI_{k.upper()}'
        if envvar in os.environ:
            LOG.debug(f'Reading {k} from envvar: {envvar}')
            opts[k] = os.getenv(envvar)

    # check values
    for o in keys:
        if o not in opts:
            LOG.error(f'Option is missing: {o}')
            sys.exit(1)
        if not opts[o]:
            LOG.error(f'Option must have a value: {o}')
            sys.exit(1)

    return opts


def do_policies(args: argparse.Namespace, api: Cybereason) -> None:
    cmd = PoliciesSubcommand(api)
    if args.policies_action == 'list':
        cmd.list()
    elif args.policies_action == 'dump':
        cmd.dump(args.policy_id, args.out_file)
    elif args.policies_action == 'compare':
        cmd.compare(args.a, args.b, args.out_file)
    else:
        LOG.error(f'Unknown action: {args.policies_action}')


def do_sensors(args: argparse.Namespace, api: Cybereason) -> None:
    if args.sensors_action == 'query':
        filters = _filters(args.filters)
        a = SensorsActions(api)
        a.query(filters)
    elif args.sensors_action == 'logs':
        sensors = args.sensors
        LOG.info(f'Getting logs for sensors: {sensors}')
    else:
        LOG.error(f'Unknown action: {args.sensors_action}')


if __name__ == '__main__':
    logo()

    # crcli <options> <subcommand>
    root_parser = argparse.ArgumentParser()
    root_parser.add_argument('-s', '--server', default=None)
    root_parser.add_argument('-u', '--username', default=None)
    root_parser.add_argument('-p', '--password', default=None)
    root_parser.add_argument('-c', '--conf', default=None)
    subcommand = root_parser.add_subparsers(dest='subcommand')

    # sensors <sensor_action> <options>
    sensors_module = subcommand.add_parser('sensors')
    sensors_action = sensors_module.add_subparsers(dest='sensors_action')
    # sensors query <options>
    sensors_query = sensors_action.add_parser('query')
    sensors_query.add_argument('--filters')
    sensors_query.add_argument('--out-file')
    # sensors logs <opions>
    sensors_logs = sensors_action.add_parser('logs')
    sensors_logs.add_argument('--sensors', nargs='+', default=None)
    sensors_logs.add_argument('--out-file')

    # policies <action> <options>
    policies_module = subcommand.add_parser('policies')
    policies_action = policies_module.add_subparsers(dest='policies_action')
    # policies list <options>
    policies_list = policies_action.add_parser('list')
    policies_list.add_argument('--out-file')
    # policies dump <options>
    policies_dump = policies_action.add_parser('dump')
    policies_dump.add_argument('--policy-id', required=True)
    policies_dump.add_argument('--out-file')
    # policies compare <options>
    policies_compare = policies_action.add_parser('compare')
    policies_compare.add_argument('-a')
    policies_compare.add_argument('-b')
    policies_compare.add_argument('-o', '--out-file')

    # parse arguments
    args = root_parser.parse_args()

    # setup logging
    logging.basicConfig(
        level=getattr(logging, os.getenv('CRCLI_LOG_LEVEL', 'INFO')),
        format='%(levelname)s: %(name)s: %(message)s'
    )

    # parse connection options
    c_opts = parse_connection_options(args)

    # init api
    with Cybereason(c_opts['server'],
                    username=c_opts['username'],
                    password=c_opts['password']) as api:
        if args.subcommand == 'sensors':
            do_sensors(args, api)
        elif args.subcommand == 'policies':
            do_policies(args, api)
        else:
            LOG.error(f'Invalid subcommand ({args.subcommand})')
            sys.exit(1)
    sys.exit(0)

# vim: ft=python
