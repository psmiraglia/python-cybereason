#!/usr/bin/env python3

# Copyright 2022 Paolo Smiraglia <paolo.smiraglia@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import json
import logging
import os
import sys

from pycybereason import version
from pycybereason.actions import SensorsActions
from pycybereason.api import Cybereason

# setup logging
sh = logging.StreamHandler()
sh.setLevel(logging.DEBUG)
sh.setFormatter(logging.Formatter('[%(name)s][%(levelname)5.5s] %(message)s'))
LOG = logging.getLogger(__name__)
LOG.setLevel(logging.DEBUG)
LOG.addHandler(sh)


def logo():
    print(f'''
                   _____      _
                  / ____|    | |
      _ __  _   _| |    _   _| |__   ___ _ __ ___  __ _ ___  ___  _ __
     | '_ \| | | | |   | | | | '_ \ / _ \ '__/ _ \/ _` / __|/ _ \| '_ \\
     | |_) | |_| | |___| |_| | |_) |  __/ | |  __/ (_| \__ \ (_) | | | |
     | .__/ \__, |\_____\__, |_.__/ \___|_|  \___|\__,_|___/\___/|_| |_|
     | |     __/ |       __/ |
     |_|    |___/       |___/  v{version}

 ''')  # noqa


def parse_cfg_file(cfg_file):
    cfg = {}
    if not os.path.exists(cfg_file):
        LOG.error(f'{cfg_file} not found')
        sys.exit(1)
    else:
        with open(cfg_file, 'r') as fp:
            cfg = json.load(fp)
            fp.close()
    return cfg


def _filters(filters):
    f = None

    try:
        if filters.startswith('@'):
            # load filters from file
            ffile = filters[1:]
            if not os.path.exists(ffile):
                LOG.error(f'{ffile} does not exist')
            else:
                LOG.debug(f'Load filters from file ({ffile})')
                with open(ffile, 'r') as fp:
                    f = json.load(fp)
                    fp.close()
        else:
            # load filters from string
            LOG.debug(f'Load filters from string ({filters})')
            f = json.loads(filters)
    except Exception as e:
        LOG.error(f'Unable to load filters: {e}')
        sys.exit(1)

    return f


if __name__ == '__main__':
    logo()

    parser = argparse.ArgumentParser()

    # connection parameters
    parser.add_argument('-s', '--server', default=None)
    parser.add_argument('-u', '--username', default=None)
    parser.add_argument('-p', '--password', default=None)
    parser.add_argument('-c', '--conf', default=None)

    # subcommands
    subparsers = parser.add_subparsers(dest='subcommand')
    sensors = subparsers.add_parser('sensors')

    # sensors action: query
    sensors.add_argument('--query', action='store_true')
    sensors.add_argument('--filters', default=None)

    # sensors action: get logs
    sensors.add_argument('--get-logs', action='store_true')
    sensors.add_argument('--sensors', nargs='+', default=None)

    # parse arguments
    args = parser.parse_args()

    # parse connection settings
    server = args.server
    username = args.username
    password = args.password
    if args.conf:
        cfg = parse_cfg_file(args.conf)
        if 'server' in cfg:
            server = cfg['server']
        if 'username' in cfg:
            username = cfg['username']
        if 'password' in cfg:
            password = cfg['password']

    if not server:
        LOG.error('server is missing')
        sys.exit(1)

    if not username:
        LOG.error('username is missing')
        sys.exit(1)

    if not password:
        LOG.error('password is missing')
        sys.exit(1)

    # init api
    with Cybereason(server, username=username, password=password) as api:
        if args.subcommand == 'sensors':
            if args.query:
                filters = _filters(args.filters)
                a = SensorsActions(api)
                a.query(filters)
            if args.get_logs:
                sensors = args.sensors
                LOG.info(f'Getting logs for sensors: {sensors}')
        else:
            LOG.error(f'Invalid subcommand ({args.subcommand})')
            sys.exit(1)
    sys.exit(0)

# vim: ft=python
