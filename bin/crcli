#!/usr/bin/env python3

# Copyright 2022 Paolo Smiraglia <paolo.smiraglia@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import json
import logging
import os
import sys
from typing import Dict

from pycybereason import version
from pycybereason.api import Cybereason
from pycybereason.app import (
    MalopsSubcommand,
    PoliciesSubcommand,
    SensorsSubcommand,
)

LOG = logging.getLogger(__name__)


def logo():
    print(f'''
                   _____      _
                  / ____|    | |
      _ __  _   _| |    _   _| |__   ___ _ __ ___  __ _ ___  ___  _ __
     | '_ \| | | | |   | | | | '_ \ / _ \ '__/ _ \/ _` / __|/ _ \| '_ \\
     | |_) | |_| | |___| |_| | |_) |  __/ | |  __/ (_| \__ \ (_) | | | |
     | .__/ \__, |\_____\__, |_.__/ \___|_|  \___|\__,_|___/\___/|_| |_|
     | |     __/ |       __/ |
     |_|    |___/       |___/  v{version}

 ''')  # noqa


def parse_connection_options(args: argparse.Namespace) -> Dict:
    opts = {}
    keys = ['server', 'username', 'password']

    # read from options
    for k in keys:
        value = getattr(args, k)
        if value:
            LOG.debug(f'Reading {k} from switch: --{k}')
            opts[k] = value

    # read from config file
    if args.conf:
        cfg = {}
        if not os.path.exists(args.conf):
            print(f'[E] Configuration file not found: {args.conf}')
            sys.exit(1)
        else:
            with open(args.conf, 'r') as fp:
                cfg = json.load(fp)
                fp.close()
        for k in keys:
            if k in cfg:
                LOG.debug(f'Reading {k} from file: {args.conf}')
                opts[k] = cfg[k]

    # read from envvar
    for k in keys:
        envvar = f'CRCLI_{k.upper()}'
        if envvar in os.environ:
            LOG.debug(f'Reading {k} from envvar: {envvar}')
            opts[k] = os.getenv(envvar)

    # check values
    for o in keys:
        if o not in opts:
            print(f'[E] Option is missing: {o}')
            sys.exit(1)
        if not opts[o]:
            print(f'[E] Option must have a value: {o}')
            sys.exit(1)

    return opts


def do_policies(args: argparse.Namespace, api: Cybereason) -> None:
    cmd = PoliciesSubcommand(api)
    if args.policies_action == 'list':
        cmd.list()
    elif args.policies_action == 'dump':
        cmd.dump(args.policy_id, args.out_file)
    elif args.policies_action == 'compare':
        cmd.compare(args.policy_a, args.policy_b, args.out_file)
    else:
        LOG.error(f'Unknown action: {args.policies_action}')


def do_sensors(args: argparse.Namespace, api: Cybereason) -> None:
    cmd = SensorsSubcommand(api)
    if args.sensors_action == 'query':
        cmd.query(
            args.cols,
            args.filters,
            args.os_type,
            args.out_file,
            args.out_form,
            args.status
        )
    elif args.sensors_action == 'logs':
        cmd.logs(args.sensors)
    elif args.sensors_action == 'upgrade':
        cmd.upgrade(args)
    else:
        LOG.error(f'Unknown action: {args.sensors_action}')


def do_ping(args: argparse.Namespace, api: Cybereason) -> None:
    if args.version:
        v = api.ping.version()
        print(f'[*] Cybereason version: {v}')
    if args.uptime:
        v = api.ping.uptime()
        print(f'[*] Platform uptime: {v}')


if __name__ == '__main__':
    logo()

    # crcli <options> <subcommand>
    root_parser = argparse.ArgumentParser()
    root_parser.add_argument('-s', '--server', default=None)
    root_parser.add_argument('-u', '--username', default=None)
    root_parser.add_argument('-p', '--password', default=None)
    root_parser.add_argument('-c', '--conf', default=None)
    subcommand = root_parser.add_subparsers(dest='subcommand')

    # sensors <sensor_action> <options>
    sensors_module = subcommand.add_parser('sensors')
    sensors_action = sensors_module.add_subparsers(dest='sensors_action')
    # sensors query <options>
    sensors_query = sensors_action.add_parser('query')
    sensors_query.add_argument('--filters')
    sensors_query.add_argument('--out-file')
    status_choices = ['Online', 'Offline', 'Stale', 'Archived']
    sensors_query.add_argument('--status', choices=status_choices,
                               default=None, nargs='+')
    os_choices = ['UNKNOWN_OS', 'WINDOWS', 'OSX', 'LINUX']
    sensors_query.add_argument('--os-type', choices=os_choices,
                               default=None, nargs='+')
    sensors_query.add_argument('--cols', default=['machineName'], nargs='+')
    sensors_query.add_argument('--out-form', choices=['TABLE', 'CSV'],
                               default='TABLE')

    # sensors logs <opions>
    sensors_logs = sensors_action.add_parser('logs')
    sensors_logs.add_argument('--sensors', nargs='+', default=None)
    sensors_logs.add_argument('--out-file')
    # sensors upgrade <options>
    sensors_upgrade = sensors_action.add_parser('upgrade')
    sensors_upgrade.add_argument('--filters')
    sensors_upgrade.add_argument('--limit', default='100')
    sensors_upgrade.add_argument('--assume-yes', action='store_true')
    sensors_upgrade.add_argument('--out-file', '-o')
    sensors_upgrade.add_argument('--batch-file')

    # policies <action> <options>
    policies_module = subcommand.add_parser('policies')
    policies_action = policies_module.add_subparsers(dest='policies_action')
    # policies list <options>
    policies_list = policies_action.add_parser('list')
    policies_list.add_argument('--out-file')
    # policies dump <options>
    policies_dump = policies_action.add_parser('dump')
    policies_dump.add_argument('--policy-id', required=True)
    policies_dump.add_argument('--out-file')
    # policies compare <options>
    policies_compare = policies_action.add_parser('compare')
    policies_compare.add_argument('--policy-a', '-a')
    policies_compare.add_argument('--policy-b', '-b')
    policies_compare.add_argument('--out-file', '-o')

    # ping <options>
    ping_module = subcommand.add_parser('ping')
    ping_module.add_argument('--version', action='store_true')
    ping_module.add_argument('--uptime', action='store_true')

    # malops <action> <options>
    malops_module = subcommand.add_parser('malops')
    malops_action = malops_module.add_subparsers(dest='malops_action')
    # malops inbox <options>
    malops_inbox = malops_action.add_parser('inbox')
    malops_inbox.add_argument('--start-time', required=True)
    malops_inbox.add_argument('--end-time', required=True)
    malops_inbox.add_argument('--group-ids', default=[])
    malops_inbox.add_argument('--filter', default=None)
    malops_inbox.add_argument('--show-machines', action='store_true')

    # parse arguments
    args = root_parser.parse_args()

    # setup logging
    logging.basicConfig(
        level=getattr(logging, os.getenv('CRCLI_LOG_LEVEL', 'INFO')),
        format='%(levelname)s: %(name)s: %(message)s'
    )

    # parse connection options
    c_opts = parse_connection_options(args)

    # init api
    with Cybereason(c_opts['server'],
                    username=c_opts['username'],
                    password=c_opts['password']) as api:
        if args.subcommand == 'sensors':
            do_sensors(args, api)
        elif args.subcommand == 'policies':
            do_policies(args, api)
        elif args.subcommand == 'ping':
            do_ping(args, api)
        elif args.subcommand == 'malops':
            cmd = MalopsSubcommand(api, c_opts)
            try:
                getattr(cmd, args.malops_action)(args)
            except Exception as e:
                LOG.error(e)
        else:
            LOG.error(f'Invalid subcommand ({args.subcommand})')
            sys.exit(1)
    sys.exit(0)

# vim: ft=python
